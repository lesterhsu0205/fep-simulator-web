openapi: 3.0.3
info:
  title: FEP Simulator API
  description: |
    FEP (Front End Processor) Simulator API 規格文件
    
    本系統提供使用者管理、財金和聯徵情境模擬功能，用於測試交易情境設定和查詢。
    
    ## 主要功能模組
    - **使用者管理**: 使用者認證、建立與權限管理
    - **財金情境管理**: 模擬財金交易情境（通匯、轉帳、核驗、FXML）
    - **聯徵情境管理**: 模擬聯徵查詢情境（個人信用報告、企業信用報告等）
    
    ## 認證機制
    - 使用 JWT (JSON Web Token) 進行身份認證
    - Token 需在 HTTP Header 中的 Authorization 欄位提供，格式：`Bearer {token}`
    
    ## 回應格式
    所有 API 回應皆使用統一格式：
    ```json
    {
      "messageCode": "回應代碼",
      "messageDesc": "回應描述",
      "messageContent": "回應內容（可為 null）"
    }
    ```
    
    ## 重要變更 (v1.4.0)
    **新增 API 端點與功能擴充**:
    - **收送紀錄管理**: 新增 `/fes/api/logs` 交易收送紀錄查詢 API，支援多條件篩選和分頁
    - **使用者管理優化**: 新增 `/fes/api/users/maint` 統一使用者維護端點，支援 A/U/D 操作
    - **使用者列表查詢**: 新增 `/fes/api/users/list` 和 `/fes/api/users/{id}` 使用者查詢 API
    - **txnData 排序**: 交易日誌中的 txnData 欄位依據 txmsglayout 表進行結構化排序
    - **角色關聯管理**: 使用者管理支援角色關聯的建立、更新和刪除
    - **完整 Schema 定義**: 新增所有新 API 的完整 Schema 定義和驗證規則
    
    ## 歷史變更 (v1.3.0)
    **系統架構優化與新增功能**:
    - **模組化重構**: 新增 fep-simulator-common 模組，統一管理共享 DTOs 和工具類
    - **JCIC 交易優化**: bizCode "121" JCIC 交易處理優化，Base64 編解碼改為返回純文字 UTF-8
    - **錯誤處理統一**: AdminController 使用 CommResponse 統一回應格式
    - **交易模擬器**: 新增 `/fes/txn/service/out` 端點支援交易模擬（同步/非同步）
    - **系統管理 API**: 新增快取管理和健康檢查功能
    - **Token 驗證**: 新增 `/auth/verify` Token 驗證端點
    
    ## 歷史變更 (v1.2.0)
    **使用者註冊公開化**: `/users/create` 端點已調整為公開端點：
    - **無需認證**: 建立使用者帳號不再需要 JWT Token 認證
    - **支援註冊**: 允許任何人建立新的使用者帳戶
    - **簡化流程**: 移除了註冊過程中的身份驗證要求
    
    ## 歷史變更 (v1.1.0)
    **null 值處理優化**: 所有查詢類型的 API 回應已進行重要改善：
    - **完整欄位回應**: 所有 response 欄位都會包含在回應中，不會省略任何欄位
    - **明確 null 值**: null 值會明確顯示為 `null`，而不是省略該欄位
    - **一致性保證**: 前端可以依賴所有欄位都會存在，只需要檢查值是否為 null
    - **提升可預測性**: 這個變更大幅提升了 API 回應的一致性和可預測性
    
    ## 錯誤代碼說明
    - `00000`: 交易成功
    - `9999`: 交易失敗/業務邏輯錯誤
    - `9998`: 參數驗證失敗 (Token 已過期)
    - `9997`: 系統內部錯誤 (Token 不存在)
    - `9996`: 轉送系統連線錯誤
    - `9995`: 電文格式錯誤
    - `9994`: 欄位長度驗證失敗
    - `P0108`: 聯徵查詢失敗
    
  version: 1.4.0
  contact:
    name: LINE Bank FEP Simulator Team
    email: angus.kao@linebank.com.tw
  license:
    name: Private
    
servers:
  - url: https://{domain_name}
    description: Production server
    variables:
      domain_name:
        default: example.com
        description: Domain name of the FEP Simulator service

security:
  - bearerAuth: []

tags:
  - name: 使用者管理
    description: 使用者認證、建立與管理相關 API
  - name: 財金情境管理
    description: 財金交易情境設定與查詢 API
  - name: 聯徵情境管理  
    description: 聯徵查詢情境設定與查詢 API
  - name: 交易模擬器
    description: FEP 交易模擬處理 API
  - name: 系統管理
    description: 系統管理與維護相關 API
  - name: 收送紀錄管理
    description: 交易收送紀錄查詢相關 API

paths:
  # 使用者管理 API
  /fes/api/auth/login:
    post:
      tags:
        - 使用者管理
      summary: 使用者登入
      description: |
        使用者登入系統，驗證身份並取得 JWT Token
        
        ## 功能特色
        - 使用 SHA-256 密碼驗證
        - 根據帳號類型配發不同期限的 Token
        - 回傳使用者角色和功能選單權限
        - 支援最多3層的功能選單結構
        
        ## 處理流程
        1. 驗證使用者帳號是否存在
        2. 使用 SHA-256 驗證密碼
        3. 依據帳號類型配發 Token 期限
        4. 查詢使用者資訊、角色和功能權限
        5. 回傳完整的登入資訊和功能選單
      operationId: userLogin
      security: []  # 登入不需要認證
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginRequest'
            examples:
              login_example:
                summary: 使用者登入範例
                value:
                  username: "BK00361"
                  password: "a222222"
      responses:
        '200':
          description: 登入結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                success:
                  summary: 登入成功
                  value:
                    messageCode: "00000"
                    messageDesc: "登入成功"
                    messageContent:
                      username: "BK00361"
                      token: "eyJhbGciOiJIUzUxMiJ9.eyJhY2NvdW50VHlwZSI6ImFkbWluIiwicm9sZUNvZGUiOiJCUzAxMSIsInVzZXJQdyI6IiQyYSQxMCREVmh4OUpmcFNEOWZzM0Y4OG90dlV1RkQzaDBzdW9RQkFhQ0FSWVFRVDY2eE0uUjVLUVhreSIsInVzZXJOYW1lIjoiQkswMDM2MSIsInVzZXJJZCI6MSwic3ViIjoiMSIsImlhdCI6MTc1MTUyMTk5NSwiZXhwIjoxNzUxNTI1NTk1fQ.9zJ7Sfxv6ui8YsE-xKhRtBLKhmaykEAH5PeYtSsum1n2aFD0pbhkNPnwwix3DL3nq4MIzhlZBM6LkiBZ8GRosg"
                      role: "BS011"
                      menus:
                        - path: null
                          code: "SYS_FUNC_MGMT"
                          children:
                            - path: "/USER_MAINT"
                              code: "USER_MAINT"
                              children: []
                              name: "使用者維護"
                              id: 101
                              url: "/api/users"
                            - path: "/ROLE_MAINT"
                              code: "ROLE_MAINT"
                              children: []
                              name: "角色維護"
                              id: 102
                              url: "/api/roles"
                          name: "系統功能管理"
                          id: 100
                          url: null
                login_failed:
                  summary: 登入失敗
                  value:
                    messageCode: "9999"
                    messageDesc: "登入失敗"
                    messageContent: null
                system_error:
                  summary: 系統錯誤
                  value:
                    messageCode: "9997"
                    messageDesc: "系統內部錯誤"
                    messageContent: null

  /fes/api/auth/verify:
    post:
      tags:
        - 使用者管理
      summary: Token 驗證
      description: |
        驗證 JWT Token 的有效性
        
        ## 功能特色
        - 驗證 Token 格式和有效期
        - 檢查 Token 是否存在於系統中
        - 確認 Token 未過期
      operationId: verifyToken
      security: []  # Token 驗證不需要預先認證
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerifyRequest'
            examples:
              verify_example:
                summary: Token 驗證範例
                value:
                  token: "eyJhbGciOiJIUzUxMiJ9.eyJhY2NvdW50VHlwZSI6ImFkbWluIi..."
      responses:
        '200':
          description: 驗證結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                valid_token:
                  summary: Token 有效
                  value:
                    messageCode: "00000"
                    messageDesc: "Token is valid."
                    messageContent: null
                invalid_token:
                  summary: Token 無效
                  value:
                    messageCode: "9998"
                    messageDesc: "Token 已過期"
                    messageContent: null
                missing_token:
                  summary: Token 缺失
                  value:
                    messageCode: "9998"
                    messageDesc: "Token 已過期"
                    messageContent: null

  /fes/api/auth/:
    get:
      tags:
        - 使用者管理
      summary: 服務健康檢查
      description: 檢查 FEP Simulator API 服務狀態
      operationId: healthCheck
      security: []  # 健康檢查不需要認證
      responses:
        '200':
          description: 服務狀態
          content:
            text/plain:
              schema:
                type: string
                example: "FEP Simulator API is running!"

  /fes/api/users/create:
    post:
      tags:
        - 使用者管理
      summary: 使用者註冊
      description: |
        公開的使用者註冊端點，允許任何人建立新的使用者帳號
        
        ## 功能特色
        - 使用者名稱唯一性驗證
        - SHA-256 密碼加密存儲
        - 支援帳號類型和角色權限設定
        - 完整的參數驗證和錯誤提示
        
        ## 處理流程
        1. 驗證使用者名稱唯一性
        2. 驗證必填欄位和格式
        3. 使用 SHA-256 加密密碼
        4. 建立使用者帳號記錄
        5. 設定帳號類型和角色權限
        
        ## 安全性考量
        - **公開端點**: 此端點不需要 JWT Token 認證
        - **開放註冊**: 任何人都可以建立新的使用者帳戶
        - **輸入驗證**: 所有輸入參數都會進行嚴格驗證
      operationId: createUser
      security: []  # 註冊不需要認證
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
            examples:
              create_full_example:
                summary: 完整參數建立使用者
                value:
                  username: "BK00361"
                  password: "a222222"
                  email: "angus.kao@linebank.com.tw"
                  accountType: "user"
                  roleCode: "BS011"
              create_minimal_example:
                summary: 最小必要參數建立使用者
                value:
                  username: "testuser001"
                  password: "testpass123"
                  accountType: "user"
      responses:
        '200':
          description: 建立結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                success:
                  summary: 建立成功
                  value:
                    messageCode: "00000"
                    messageDesc: "新增成功。"
                    messageContent: null
                username_exists:
                  summary: 使用者名稱重複
                  value:
                    messageCode: "9999"
                    messageDesc: "使用者名稱已存在"
                    messageContent: null
                validation_error:
                  summary: 參數驗證失敗
                  value:
                    messageCode: "9998"
                    messageDesc: "參數驗證失敗"
                    messageContent:
                      errors:
                        - field: "username"
                          message: "使用者名稱不能為空"
                        - field: "password"
                          message: "密碼不能為空"
                        - field: "accountType"
                          message: "帳號類型不能為空"
                system_error:
                  summary: 系統錯誤
                  value:
                    messageCode: "9997"
                    messageDesc: "系統內部錯誤"
                    messageContent: null

  # 財金情境管理 API
  /fes/api/finance/scenario/maint:
    post:
      tags:
        - 財金情境管理
      summary: 財金情境維護（統一端點）
      description: |
        統一的財金情境維護端點，支援新增(A)、修改(U)、刪除(D)操作
        
        ## 操作類型
        - **A (新增)**: 建立新的財金情境，帳號必須唯一
        - **U (修改)**: 更新既有財金情境，保留原始建立資訊
        - **D (刪除)**: 刪除指定ID的財金情境（不可逆）
        
        ## 欄位驗證規則
        - A操作時：action、account、situationDesc 為必填
        - U操作時：action、id、account、situationDesc 為必填
        - D操作時：action、id 為必填
      operationId: maintainFiscSituation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FiscSituationMaintenanceRequest'
            examples:
              create_example:
                summary: 新增財金情境
                value:
                  action: "A"
                  account: "123456789012"
                  situationDesc: "測試通匯交易成功情境"
                  memo: "用於測試一般通匯交易成功流程"
                  isRmt: true
                  rmtResultCode: "00000"
                  isAtm: false
                  atmVerify: false
                  isFxml: false
              update_example:
                summary: 修改財金情境
                value:
                  action: "U"
                  id: 1
                  account: "123456789012"
                  situationDesc: "更新後的測試情境"
                  memo: "修改後的補充說明"
                  isRmt: true
                  rmtResultCode: "00000"
                  isAtm: true
                  atmResultCode: "00000"
              delete_example:
                summary: 刪除財金情境
                value:
                  action: "D"
                  id: 1
      responses:
        '200':
          description: 操作結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                create_success:
                  summary: 新增成功
                  value:
                    messageCode: "00000"
                    messageDesc: "交易成功"
                    messageContent:
                      fiscSituation:
                        id: 1
                        account: "123456789012"
                        situationDesc: "測試通匯交易成功情境"
                        memo: "用於測試一般通匯交易成功流程"
                        isRmt: true
                        rmtResultCode: "00000"
                        isAtm: false
                        atmResultCode: null
                        atmVerify: false
                        atmVerifyRCode: null
                        atmVerifyRDetail: null
                        isFxml: false
                        fxmlResultCode: null
                        creator: "john.doe"
                        createdAt: "2025/01/09 10:30:45"
                        updater: "john.doe"
                        updatedAt: "2025/01/09 10:30:45"
                delete_success:
                  summary: 刪除成功
                  value:
                    messageCode: "00000"
                    messageDesc: "交易成功"
                    messageContent: null
                validation_error:
                  summary: 參數驗證失敗
                  value:
                    messageCode: "9999"
                    messageDesc: "帳號不能為空"
                    messageContent: null

  /fes/api/finance/scenario/list:
    get:
      tags:
        - 財金情境管理
      summary: 查詢財金情境列表
      description: |
        查詢所有財金情境設定列表，支援分頁和條件篩選
        
        ## 查詢條件
        - **account**: 帳號模糊查詢（支援部分比對）
        - **creator**: 建立者精確查詢（完全比對）
        
        ## 分頁機制
        - 未指定分頁參數時，回傳所有符合條件的資料
        - 指定分頁參數時，使用分頁查詢
        - 結果依建立時間降序排列（最新的在前）
      operationId: getFiscSituationList
      parameters:
        - name: page
          in: query
          description: 頁碼，從1開始
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: pageSize
          in: query
          description: 每頁筆數
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 10
        - name: account
          in: query
          description: 帳號模糊查詢
          required: false
          schema:
            type: string
            maxLength: 50
            example: "123"
        - name: creator
          in: query
          description: 建立者篩選
          required: false
          schema:
            type: string
            maxLength: 50
            example: "john"
      responses:
        '200':
          description: 查詢結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                success:
                  summary: 查詢成功
                  value:
                    messageCode: "00000"
                    messageDesc: "查詢成功"
                    messageContent:
                      query:
                        account: "123"
                        creator: "john"
                      pagination:
                        currentPage: 1
                        itemsPerPage: 10
                        totalItems: 25
                        totalPages: 3
                        hasNextPage: true
                        hasPrevPage: false
                      fiscSituations:
                        - id: 1
                          account: "123456789012345"
                          situationDesc: "測試使用末日預言 1"
                          isRmt: true
                          rmtResultCode: "00000"
                          isAtm: false
                          atmResultCode: null
                          atmVerify: true
                          atmVerifyRCode: "00000"
                          atmVerifyRDetail: "000001"
                          isFxml: true
                          fxmlResultCode: "310"
                          updater: "BK00361"
                          updatedAt: "2025/07/05 05:00:00"

  /fes/api/finance/scenario/{id}:
    get:
      tags:
        - 財金情境管理
      summary: 依ID查詢單筆財金情境
      description: |
        查詢特定ID的財金情境詳細資訊
        
        **重要變更 (v1.1.0)**: 所有回應欄位都會包含在結果中，null 值會明確顯示為 `null`，提升 API 回應的一致性和可預測性。
      operationId: getFiscSituationById
      parameters:
        - name: id
          in: path
          description: 財金情境ID
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 查詢結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                success:
                  summary: 查詢成功
                  value:
                    messageCode: "00000"
                    messageDesc: "交易成功"
                    messageContent:
                      fiscSituation:
                        id: 1
                        account: "123456789012"
                        situationDesc: "測試通匯交易成功情境"
                        memo: null
                        isRmt: true
                        rmtResultCode: "00000"
                        isAtm: false
                        atmResultCode: null
                        atmVerify: false
                        atmVerifyRCode: null
                        atmVerifyRDetail: null
                        isFxml: false
                        fxmlResultCode: null
                        creator: "john.doe"
                        createdAt: "2025/01/09 10:30:45"
                        updater: "john.doe"
                        updatedAt: "2025/01/09 10:30:45"
                not_found:
                  summary: 資料不存在
                  value:
                    messageCode: "9999"
                    messageDesc: "財金情境不存在"
                    messageContent: null

  /fes/api/finance/scenario/query:
    get:
      tags:
        - 財金情境管理
      summary: 依帳號查詢財金情境
      description: |
        依帳號查詢財金情境詳細資訊
        
        **重要變更 (v1.1.0)**: 
        - API 路徑已改為 query 參數形式 `/finance/scenario/query?account=123456`
        - 所有回應欄位都會包含在結果中，null 值會明確顯示為 `null`，提升 API 回應的一致性和可預測性。
      operationId: getFiscSituationByAccount
      parameters:
        - name: account
          in: query
          description: 財金測試帳號
          required: true
          schema:
            type: string
            maxLength: 16
            example: "123456789012"
      responses:
        '200':
          description: 查詢結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                success:
                  summary: 查詢成功
                  value:
                    messageCode: "00000"
                    messageDesc: "交易成功"
                    messageContent:
                      fiscSituation:
                        id: 1
                        account: "123456789012"
                        situationDesc: "測試通匯交易成功情境"
                        memo: null
                        isRmt: true
                        rmtResultCode: "00000"
                        isAtm: false
                        atmResultCode: null
                        atmVerify: false
                        atmVerifyRCode: null
                        atmVerifyRDetail: null
                        isFxml: false
                        fxmlResultCode: null
                        creator: "john.doe"
                        createdAt: "2025/01/09 10:30:45"
                        updater: "john.doe"
                        updatedAt: "2025/01/09 10:30:45"
                not_found:
                  summary: 資料不存在
                  value:
                    messageCode: "9999"
                    messageDesc: "財金情境不存在"
                    messageContent: null

  /fes/api/finance/scenario/create:
    post:
      tags:
        - 財金情境管理
      summary: 建立財金情境（舊版端點）
      description: |
        建立新的財金情境設定，支援多種交易類型配置
        
        **注意**: 建議使用 `/maint` 端點的 A (新增) 操作
      operationId: createFiscSituation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FiscSituationRequest'
      responses:
        '200':
          description: 建立結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'

  /fes/api/finance/scenario/upload:
    post:
      tags:
        - 財金情境管理
      summary: 財金情境檔案上傳
      description: |
        透過上傳 Excel 檔案批量建立或更新財金情境資料
        
        ## 功能特色
        - 支援 Excel (.xlsx) 檔案格式
        - 支援批量建立 (CREATE) 和更新 (UPDATE) 操作
        - 即時處理，檔案處理完成後立即刪除
        - 直接寫入 fisc_situation 資料表
        - 完整的錯誤驗證和回報機制
        
        ## 檔案格式要求
        - **檔案類型**: .xlsx 格式
        - **工作表名稱**: "財金情境表"
        - **最大檔案大小**: 10MB
        - **最大記錄數**: 10,000 筆
        
        ## 操作模式
        - **CREATE**: 批量建立新的財金情境，帳號必須唯一
        - **UPDATE**: 批量更新既有財金情境，使用帳號作為識別符
      operationId: uploadFiscSituationFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
            examples:
              create_example:
                summary: 批量建立財金情境
                value:
                  file: "(binary file content)"
                  action: "CREATE"
              update_example:
                summary: 批量更新財金情境
                value:
                  file: "(binary file content)"
                  action: "UPDATE"
      responses:
        '200':
          description: 檔案處理結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                success:
                  summary: 處理成功
                  value:
                    messageCode: "00000"
                    messageDesc: "處理完成"
                    messageContent:
                      uploadId: "upload-20250901-001"
                      fileName: "財金情境資料.xlsx"
                      action: "CREATE"
                      totalRecords: 100
                      successRecords: 95
                      failedRecords: 5
                      successRate: 95.00
                      processingTime: "00:00:45"
                      processedAt: "2025-09-01T10:30:00Z"
                      creator: "john.doe"
                      errors:
                        - row: 6
                          column: "account"
                          value: "12345"
                          errorCode: "9203"
                          errorMessage: "帳號格式不正確"
                file_format_error:
                  summary: 檔案格式錯誤
                  value:
                    messageCode: "9100"
                    messageDesc: "檔案處理失敗"
                    messageContent:
                      uploadId: "upload-20250901-002"
                      fileName: "invalid.xls"
                      action: "CREATE"
                      totalRecords: 0
                      successRecords: 0
                      failedRecords: 0
                      successRate: 0.00
                      processingTime: "00:00:02"
                      processedAt: "2025-09-01T10:30:00Z"
                      creator: "john.doe"
                      errors:
                        - row: null
                          column: null
                          value: "invalid.xls"
                          errorCode: "9100"
                          errorMessage: "不支援的檔案格式，僅支援 .xlsx 格式"

  # 聯徵情境管理 API
  /fes/api/credit/maint:
    post:
      tags:
        - 聯徵情境管理
      summary: 聯徵情境維護（統一端點）
      description: |
        統一的聯徵情境維護端點，支援新增(A)、修改(U)、刪除(D)操作
        
        ## 操作類型
        - **A (新增)**: 建立新的聯徵情境，查詢組合必須唯一
        - **U (修改)**: 更新既有聯徵情境，保留原始建立資訊
        - **D (刪除)**: 刪除指定ID的聯徵情境（不可逆）
        
        ## 組合唯一性
        查詢組合 (txid + inqueryKey1 + inqueryKey2 + returnCode + forceToJcic) 必須唯一
        
        ## forceToJcic 機制
        - **Y (強制發查)**: jcicDataDate 在查詢時自動設為當日
        - **N (歷史資料)**: 建議設定 jcicDataDate 和 jcicData
      operationId: maintainJcicSituation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JcicSituationMaintenanceRequest'
            examples:
              create_example:
                summary: 新增聯徵情境
                value:
                  action: "A"
                  txid: "QJ01"
                  inqueryKey1: "A123456789"
                  inqueryKey2: "19801010"
                  returnCode: "D0000"
                  forceToJcic: "Y"
                  jcicData: "dGVzdERhdGE="
                  situationDesc: "新增個人信用報告即時查詢測試"
                  memo: "用於測試正常的聯徵查詢流程"
              update_example:
                summary: 修改聯徵情境
                value:
                  action: "U"
                  id: 1
                  txid: "QJ01"
                  inqueryKey1: "A123456789"
                  inqueryKey2: "19801010"
                  returnCode: "D9999"
                  forceToJcic: "Y"
                  jcicData: "bm9EYXRhRm91bmQ="
                  situationDesc: "修改為查無資料測試情境"
                  memo: "測試查無資料的回應處理"
              delete_example:
                summary: 刪除聯徵情境
                value:
                  action: "D"
                  id: 1
      responses:
        '200':
          description: 操作結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'

  /fes/api/credit/list:
    get:
      tags:
        - 聯徵情境管理
      summary: 查詢聯徵情境列表
      description: |
        查詢所有聯徵測試情境設定列表，支援多重條件篩選和分頁
        
        ## 查詢條件
        - **模糊查詢欄位**: inqueryKey1、inqueryKey2（支援部分比對）
        - **精確查詢欄位**: txid、returnCode、forceToJcic、creator（完全比對）
        - **組合查詢邏輯**: 所有提供的條件都會以 AND 邏輯組合
        
        ## 資料優化
        - 列表查詢中的 jcicData 顯示為 "******" 摘要版本以提升效能
        - 完整資料請使用單筆查詢 API
      operationId: getJcicSituationList
      parameters:
        - name: page
          in: query
          description: 頁碼，從1開始
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: 每頁筆數
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: txid
          in: query
          description: 交易代碼篩選
          required: false
          schema:
            type: string
            maxLength: 10
            example: "QJ01"
        - name: inqueryKey1
          in: query
          description: 查詢條件1模糊查詢
          required: false
          schema:
            type: string
            maxLength: 60
            example: "A101010107"
        - name: inqueryKey2
          in: query
          description: 查詢條件2模糊查詢
          required: false
          schema:
            type: string
            maxLength: 15
            example: "19801010"
        - name: returnCode
          in: query
          description: 回應代碼篩選
          required: false
          schema:
            type: string
            maxLength: 5
            example: "D0000"
        - name: forceToJcic
          in: query
          description: 強制發查flag篩選
          required: false
          schema:
            type: string
            enum: ["Y", "N"]
            example: "Y"
        - name: creator
          in: query
          description: 建立者篩選
          required: false
          schema:
            type: string
            maxLength: 100
            example: "BK00361"
      responses:
        '200':
          description: 查詢結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                success:
                  summary: 查詢成功
                  value:
                    messageCode: "00000"
                    messageDesc: "查詢成功"
                    messageContent:
                      query:
                        txid: "QJ01"
                        inqueryKey1: "A101010107"
                        inqueryKey2: ""
                        returnCode: "D0000"
                        forceToJcic: "Y"
                        creator: "BK00361"
                      pagination:
                        currentPage: 1
                        itemsPerPage: 10
                        totalItems: 25
                        totalPages: 3
                        hasNextPage: true
                        hasPrevPage: false
                      jcicSituations:
                        - id: 1
                          txid: "QJ01"
                          inqueryKey1: "A101010107"
                          inqueryKey2: ""
                          returnCode: "D0000"
                          forceToJcic: "Y"
                          jcicDataDate: ""
                          jcicData: "******"
                          situationDesc: "聯徵查詢_A101010107_QJ01_強制發查_成功"
                          updater: "BK00361"
                          updatedAt: "2025/07/05 05:00:00"

  /fes/api/credit/{id}:
    get:
      tags:
        - 聯徵情境管理
      summary: 依ID查詢單筆聯徵情境
      description: |
        查詢特定ID的聯徵情境詳細資訊（包含完整的jcicData）
        
        **重要變更 (v1.1.0)**: 所有回應欄位都會包含在結果中，null 值會明確顯示為 `null`，提升 API 回應的一致性和可預測性。
      operationId: getJcicSituationById
      parameters:
        - name: id
          in: path
          description: 聯徵情境ID
          required: true
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: 查詢結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                success:
                  summary: 查詢成功
                  value:
                    messageCode: "00000"
                    messageDesc: "交易成功"
                    messageContent:
                      jcicSituation:
                        id: 1
                        txid: "QJ01"
                        inqueryKey1: "A123456789"
                        inqueryKey2: "19801010"
                        returnCode: "D0000"
                        forceToJcic: "Y"
                        jcicDataDate: "20250101"
                        jcicData: "聯徵查詢結果資料..."
                        situationDesc: "聯徵查詢_A123456789_QJ01_強制發查_成功"
                        memo: null
                        creator: "BK00361"
                        createdAt: "2025/07/05 05:00:00"
                        updater: "BK00361"
                        updatedAt: "2025/07/05 05:00:00"
                not_found:
                  summary: 資料不存在
                  value:
                    messageCode: "9999"
                    messageDesc: "聯徵情境不存在"
                    messageContent: null

  /fes/api/credit/query:
    get:
      tags:
        - 聯徵情境管理
      summary: 依查詢組合查詢聯徵情境
      description: |
        依聯徵查詢組合條件精確查詢情境
        
        **重要變更 (v1.1.0)**: 所有回應欄位都會包含在結果中，null 值會明確顯示為 `null`，提升 API 回應的一致性和可預測性。
      operationId: getJcicSituationByQuery
      parameters:
        - name: txid
          in: query
          description: 交易代碼
          required: true
          schema:
            type: string
            example: "QJ01"
        - name: inqueryKey1
          in: query
          description: 查詢條件1
          required: true
          schema:
            type: string
            example: "A123456789"
        - name: inqueryKey2
          in: query
          description: 查詢條件2
          required: false
          schema:
            type: string
            example: "19801010"
        - name: returnCode
          in: query
          description: 回應代碼
          required: true
          schema:
            type: string
            example: "D0000"
        - name: forceToJcic
          in: query
          description: 強制發查旗標
          required: true
          schema:
            type: string
            enum: ["Y", "N"]
            example: "Y"
      responses:
        '200':
          description: 查詢結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                success:
                  summary: 查詢成功
                  value:
                    messageCode: "00000"
                    messageDesc: "交易成功"
                    messageContent:
                      jcicSituation:
                        id: 1
                        txid: "QJ01"
                        inqueryKey1: "A123456789"
                        inqueryKey2: "19801010"
                        returnCode: "D0000"
                        forceToJcic: "Y"
                        jcicDataDate: "20250101"
                        jcicData: "聯徵查詢結果資料..."
                        situationDesc: "聯徵查詢_A123456789_QJ01_強制發查_成功"
                        memo: null
                        creator: "BK00361"
                        createdAt: "2025/07/05 05:00:00"
                        updater: "BK00361"
                        updatedAt: "2025/07/05 05:00:00"
                not_found:
                  summary: 資料不存在
                  value:
                    messageCode: "9999"
                    messageDesc: "聯徵情境不存在"
                    messageContent: null

  /fes/api/credit/create:
    post:
      tags:
        - 聯徵情境管理
      summary: 建立聯徵情境（舊版端點）
      description: |
        建立新的聯徵測試情境設定，用於模擬不同聯徵查詢情境
        
        **注意**: 建議使用 `/maint` 端點的 A (新增) 操作
      operationId: createJcicSituation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JcicSituationRequest'
      responses:
        '200':
          description: 建立結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'

  /fes/api/credit/upload:
    post:
      tags:
        - 聯徵情境管理
      summary: 聯徵情境檔案上傳
      description: |
        透過上傳 Excel 檔案批量建立或更新聯徵情境資料
        
        ## 功能特色
        - 支援 Excel (.xlsx) 檔案格式
        - 支援批量建立 (CREATE) 和更新 (UPDATE) 操作
        - 即時處理，檔案處理完成後立即刪除
        - 直接寫入 jcic_situation 資料表
        - jcic_data 支援明碼輸入，包含 HTML 格式和換行字符
        
        ## 檔案格式要求
        - **檔案類型**: .xlsx 格式
        - **工作表名稱**: "聯徵情境表"
        - **最大檔案大小**: 10MB
        - **最大記錄數**: 10,000 筆
        
        ## 操作模式
        - **CREATE**: 批量建立新的聯徵情境，查詢組合必須唯一
        - **UPDATE**: 批量更新既有聯徵情境，使用複合鍵識別(txid + inquery_key_1 + inquery_key_2 + return_code + force_to_jcic)
        
        ## 複合鍵識別邏輯
        UPDATE 模式使用以下欄位的組合作為唯一識別符：
        - txid (查詢項目)
        - inquery_key_1 (查詢條件1)  
        - inquery_key_2 (查詢條件2)
        - return_code (回應代碼)
        - force_to_jcic (強制發查)
      operationId: uploadJcicSituationFile
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadRequest'
            examples:
              create_example:
                summary: 批量建立聯徵情境
                value:
                  file: "(binary file content)"
                  action: "CREATE"
              update_example:
                summary: 批量更新聯徵情境
                value:
                  file: "(binary file content)"
                  action: "UPDATE"
      responses:
        '200':
          description: 檔案處理結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                success:
                  summary: 處理成功
                  value:
                    messageCode: "00000"
                    messageDesc: "處理完成"
                    messageContent:
                      uploadId: "upload-20250901-003"
                      fileName: "聯徵情境資料.xlsx"
                      action: "CREATE"
                      totalRecords: 50
                      successRecords: 48
                      failedRecords: 2
                      successRate: 96.00
                      processingTime: "00:00:30"
                      processedAt: "2025-09-01T10:30:00Z"
                      creator: "john.doe"
                      errors:
                        - row: 3
                          column: "txid"
                          value: null
                          errorCode: "9200"
                          errorMessage: "查詢項目不能為空"
                jcic_data_error:
                  summary: 聯徵資料格式錯誤
                  value:
                    messageCode: "9999"
                    messageDesc: "資料驗證失敗"
                    messageContent:
                      uploadId: "upload-20250901-004"
                      fileName: "聯徵情境資料.xlsx"
                      action: "UPDATE"
                      totalRecords: 10
                      successRecords: 8
                      failedRecords: 2
                      successRate: 80.00
                      processingTime: "00:00:25"
                      processedAt: "2025-09-01T10:30:00Z"
                      creator: "john.doe"
                      errors:
                        - row: 5
                          column: "jcic_data"
                          value: "<script>alert('xss')</script>"
                          errorCode: "9202"
                          errorMessage: "聯徵資料包含不安全的內容"

  # 交易模擬器 API
  /fes/txn/service/out:
    post:
      tags:
        - 交易模擬器
      summary: 處理模擬交易請求
      description: |
        FEP 交易模擬器主要端點，處理所有模擬交易請求
        
        ## 支援交易類型
        - **FISC 交易**: bizCode 111 (ATM), 112 (IBRS), 113 (FXML)
        - **JCIC 交易**: bizCode 121 (聯徵查詢)
        
        ## 處理模式
        - **同步模式 (S)**: 立即處理並回傳結果
        - **非同步模式 (A)**: 立即回傳確認，背景處理完成後回調
        
        ## 重要變更 (v1.3.0)
        - **JCIC 資料格式**: JCIC 回應資料改為 UTF-8 純文字格式，不再使用 Base64 編碼
        - **欄位驗證**: 新增完整的欄位長度驗證，驗證失敗時不記錄交易日誌
        - **錯誤處理**: 統一錯誤代碼和回應格式
      operationId: processTransaction
      security: []  # 模擬器端點通常不需要認證
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulatorTransactionRequest'
            examples:
              fisc_atm_sync:
                summary: FISC ATM 同步交易
                value:
                  header:
                    guid: "20250821001234567890"
                    tnsnSysCd: "CBK"
                    tgmTpCd: "S"
                    extrSmlnTstYn: "Y"
                    extrBizDsCd: "111"
                  data:
                    extHeader:
                      transactionCode: "ATM001"
                    extBody:
                      account: "123456789012"
              jcic_async:
                summary: JCIC 非同步交易
                value:
                  header:
                    guid: "20250821001234567891"
                    tnsnSysCd: "CBK"
                    tgmTpCd: "A"
                    extrSmlnTstYn: "Y"
                    extrBizDsCd: "121"
                  data:
                    extHeader:
                      transactionCode: "QJ01"
                    extBody:
                      inqueryKey1: "A123456789"
                      inqueryKey2: "19801010"
      responses:
        '200':
          description: 交易處理結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SimulatorTransactionResponse'
              examples:
                sync_success:
                  summary: 同步交易成功
                  value:
                    header:
                      guid: "20250821001234567890"
                      resultCode: "00000"
                      resultDesc: "交易成功"
                    data:
                      account: "123456789012"
                      resultCode: "00000"
                async_ack:
                  summary: 非同步交易確認
                  value:
                    header:
                      guid: "20250821001234567891"
                      resultCode: "00000"
                      resultDesc: "交易已接受處理"
                validation_error:
                  summary: 欄位驗證失敗
                  value:
                    header:
                      guid: "20250821001234567892"
                      resultCode: "9994"
                      resultDesc: "欄位長度驗證失敗: [account 長度15超過最大12]"
                jcic_error:
                  summary: JCIC 查詢失敗
                  value:
                    header:
                      guid: "20250821001234567893"
                      resultCode: "P0108"
                      resultDesc: "聯徵查詢失敗"

  # 系統管理 API
  /actuator/health:
    get:
      tags:
        - 系統管理
      summary: 系統健康檢查
      description: 檢查系統運行狀態和服務健康度
      operationId: systemHealthCheck
      responses:
        '200':
          description: 系統狀態
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                healthy:
                  summary: 系統正常
                  value:
                    messageCode: "00000"
                    messageDesc: "交易成功"
                    messageContent:
                      message: "系統運行正常"
                      operation: "healthCheck"
                      status: "healthy"
                      timestamp: 1642745400000

  /fes/api/admin/cache/all:
    delete:
      tags:
        - 系統管理
      summary: 清除所有快取
      description: |
        清除系統中所有快取資料
        
        ## 注意事項
        - 此操作會清除所有快取，可能影響系統效能
        - 建議在維護時段執行
        - 操作不可逆
      operationId: clearAllCache
      responses:
        '200':
          description: 清除結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                success:
                  summary: 清除成功
                  value:
                    messageCode: "00000"
                    messageDesc: "交易成功"
                    messageContent:
                      message: "所有快取已清除"
                      operation: "clearAllCache"
                error:
                  summary: 清除失敗
                  value:
                    messageCode: "9999"
                    messageDesc: "交易失敗"
                    messageContent:
                      message: "清除快取失敗: Connection timeout"
                      operation: "clearAllCache"
                      error: "TimeoutException"

  /fes/api/admin/cache/prefix/{prefix}:
    delete:
      tags:
        - 系統管理
      summary: 依前綴清除快取
      description: 清除指定前綴的所有快取資料
      operationId: clearCacheByPrefix
      parameters:
        - name: prefix
          in: path
          description: 快取前綴 (會自動加上 "sim:data:" 前綴)
          required: true
          schema:
            type: string
            example: "fisc"
      responses:
        '200':
          description: 清除結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'

  /fes/api/admin/cache/key/{key}:
    delete:
      tags:
        - 系統管理
      summary: 依鍵值清除快取
      description: 清除指定鍵值的快取資料
      operationId: clearCacheByKey
      parameters:
        - name: key
          in: path
          description: 快取鍵值
          required: true
          schema:
            type: string
            example: "sim:data:fisc:situation:123456789012"
      responses:
        '200':
          description: 清除結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'

  /fes/api/admin/cache/fisc/situations:
    delete:
      tags:
        - 系統管理
      summary: 清除 FISC 情境快取
      description: 清除所有 FISC 情境相關的快取資料
      operationId: clearFiscSituationCache
      responses:
        '200':
          description: 清除結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'

  /fes/api/admin/cache/fisc/situations/{account}:
    delete:
      tags:
        - 系統管理
      summary: 清除指定帳號的 FISC 情境快取
      description: 清除特定帳號的 FISC 情境快取資料
      operationId: clearFiscSituationCacheByAccount
      parameters:
        - name: account
          in: path
          description: 帳號
          required: true
          schema:
            type: string
            example: "123456789012"
      responses:
        '200':
          description: 清除結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'

  /fes/api/admin/cache/jcic:
    delete:
      tags:
        - 系統管理
      summary: 清除 JCIC 聯徵快取
      description: 清除所有 JCIC 聯徵相關的快取資料
      operationId: clearJcicCache
      responses:
        '200':
          description: 清除結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'

  /fes/api/admin/cache/check/{key}:
    get:
      tags:
        - 系統管理
      summary: 檢查快取鍵值是否存在
      description: 檢查指定快取鍵值是否存在於系統中
      operationId: checkCacheKey
      parameters:
        - name: key
          in: path
          description: 快取鍵值
          required: true
          schema:
            type: string
            example: "sim:data:fisc:situation:123456789012"
      responses:
        '200':
          description: 檢查結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                exists:
                  summary: 快取存在
                  value:
                    messageCode: "00000"
                    messageDesc: "交易成功"
                    messageContent:
                      message: "快取鍵值存在"
                      operation: "checkCacheKey"
                      key: "sim:data:fisc:situation:123456789012"
                      exists: true
                not_exists:
                  summary: 快取不存在
                  value:
                    messageCode: "00000"
                    messageDesc: "交易成功"
                    messageContent:
                      message: "快取鍵值不存在"
                      operation: "checkCacheKey"
                      key: "sim:data:fisc:situation:123456789012"
                      exists: false

  # 收送紀錄管理 API
  /fes/api/logs:
    get:
      tags:
        - 收送紀錄管理
      summary: 收送紀錄查詢列表
      description: |
        查詢交易收送紀錄，支援多條件篩選和分頁功能，用於模擬交易的日誌查詢和分析
        
        ## 功能特色
        - 支援時間範圍查詢，精確到秒
        - 支援多種系統類型篩選 (FA/FI/FX/JC)
        - 支援多種識別碼查詢 (GUID/ITAI GUID/UUID)
        - txnData欄位依據txmsglayout排序，確保資料格式一致性
        - 預設依記錄時間降序排列，最新記錄在前
        
        ## 系統類型說明
        - **FA**: 財金系統
        - **FI**: 財金資訊系統
        - **FX**: 外匯系統
        - **JC**: 聯徵系統
        
        ## 重要變更 (v1.3.0)
        - **Null值處理**: 所有回應欄位都會包含在JSON中，null值會明確顯示為null
        - **txnData排序**: 交易資料依據txmsglayout表進行結構化排序
        - **快取優化**: 系統會快取txmsglayout排序規則，提升查詢效能
      operationId: getTransactionLogs
      parameters:
        - name: page
          in: query
          description: 頁碼，從1開始
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: pageSize
          in: query
          description: 每頁筆數
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 10
        - name: startDatetime
          in: query
          description: 查詢起始時間 (yyyyMMddHHmmss格式)
          required: false
          schema:
            type: string
            pattern: '^\d{14}$'
            example: "20250905000000"
        - name: endDatetime
          in: query
          description: 查詢結束時間 (yyyyMMddHHmmss格式)
          required: false
          schema:
            type: string
            pattern: '^\d{14}$'
            example: "20250906000000"
        - name: systemType
          in: query
          description: 系統類型篩選，null表示查詢全部系統類型
          required: false
          schema:
            type: string
            enum: ["FA", "FI", "FX", "JC"]
            nullable: true
            example: "FA"
        - name: txnId
          in: query
          description: 交易代碼篩選
          required: false
          schema:
            type: string
            maxLength: 5
            example: "2521"
        - name: guid
          in: query
          description: GUID篩選
          required: false
          schema:
            type: string
            maxLength: 32
            example: "20250904171118213CBK02340D8DF1A7"
        - name: italGuidOmsgID
          in: query
          description: ITAI GUID Q MSG ID篩選
          required: false
          schema:
            type: string
            maxLength: 32
            example: "20250904171118213CBK02340D8DF1A8"
        - name: uuid
          in: query
          description: UUID篩選
          required: false
          schema:
            type: string
            maxLength: 32
            example: "20250904171118213CBK02340D8DF1A9"
      responses:
        '200':
          description: 查詢結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                success:
                  summary: 查詢成功
                  value:
                    messageCode: "00000"
                    messageDesc: "查詢成功"
                    messageContent:
                      query:
                        startDatetime: "20250905000000"
                        endDatetime: "20250906000000"
                        systemType: "FA"
                        txnId: "2521"
                        guid: "20250904171118213CBK02340D8DF1A7"
                        italGuidOmsgID: "20250904171118213CBK02340D8DF1A8"
                        uuid: "20250904171118213CBK02340D8DF1A9"
                      pagination:
                        currentPage: 1
                        itemsPerPage: 10
                        totalItems: 25
                        totalPages: 3
                        hasNextPage: true
                        hasPrevPage: false
                      txlogs:
                        - logDatetime: "2025/09/05 05:00:00"
                          systemType: "FA"
                          txnType: "req"
                          txnId: "2521"
                          guid: "20250904171118213CBK02340D8DF1A7"
                          italGuidOmsgID: "20250904171118213CBK02340D8DF1A8"
                          uuid: "20250904171118213CBK02340D8DF1A9"
                          txnData: '{"header":{"systemType":"FA","txnId":"2521","guid":"20250904171118213CBK02340D8DF1A7"},"body":{"account":"1234567890","amount":"10000"}}'
                empty_result:
                  summary: 空結果
                  value:
                    messageCode: "00000"
                    messageDesc: "查詢成功"
                    messageContent:
                      query:
                        startDatetime: null
                        endDatetime: null
                        systemType: null
                        txnId: null
                        guid: null
                        italGuidOmsgID: null
                        uuid: null
                      pagination:
                        currentPage: 1
                        itemsPerPage: 10
                        totalItems: 0
                        totalPages: 0
                        hasNextPage: false
                        hasPrevPage: false
                      txlogs: []
                validation_error:
                  summary: 參數驗證失敗
                  value:
                    messageCode: "9998"
                    messageDesc: "參數驗證失敗"
                    messageContent:
                      errors:
                        - field: "startDatetime"
                          message: "時間格式必須為yyyyMMddHHmmss"
                        - field: "systemType"
                          message: "系統類型必須為FA、FI、FX或JC其中之一，或不提供此參數以查詢全部系統"

  # 使用者管理 API
  /fes/api/users/maint:
    post:
      tags:
        - 使用者管理
      summary: 使用者維護（統一端點）
      description: |
        統一的使用者維護端點，支援新增(A)、修改(U)、刪除(D)操作
        
        ## 操作類型
        - **A (新增)**: 建立新的使用者，帳號和電子郵件必須唯一
        - **U (修改)**: 更新既有使用者，保留原始建立資訊
        - **D (刪除)**: 刪除指定ID的使用者（不可逆）
        
        ## 欄位驗證規則
        - A操作時：action, username, email, password 為必填
        - U操作時：action, id, username, email 為必填
        - D操作時：action, id 為必填
        
        ## 業務規則
        - username和email必須唯一
        - 角色管理採用覆蓋模式，更新roleCode會重建user_roles關聯
        - 密碼僅在新增時需要，修改時不可透過此API更新
        - 刪除操作會同時刪除相關的角色關聯
        
        ## 重要變更 (v1.3.0)
        - **Null值處理**: 所有回應欄位都會包含在JSON中，null值會明確顯示為null
        - **審計追蹤**: 完整記錄操作者和時間戳記
      operationId: maintainSystemUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMaintenanceRequest'
            examples:
              create_example:
                summary: 新增使用者
                value:
                  action: "A"
                  username: "john.doe"
                  email: "john.doe@example.com"
                  password: "SecurePass123!"
                  accountType: "USER"
                  isActive: true
                  roleCode: "USER_ROLE"
              update_example:
                summary: 修改使用者
                value:
                  action: "U"
                  id: 1
                  username: "john.doe.updated"
                  email: "john.updated@example.com"
                  accountType: "ADMIN"
                  isActive: true
                  roleCode: "ADMIN"
              delete_example:
                summary: 刪除使用者
                value:
                  action: "D"
                  id: 1
      responses:
        '200':
          description: 操作結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                create_success:
                  summary: 新增成功
                  value:
                    messageCode: "00000"
                    messageDesc: "交易成功"
                    messageContent:
                      user:
                        id: 1
                        username: "john.doe"
                        email: "john.doe@example.com"
                        accountType: "USER"
                        isActive: true
                        roleCode: "USER_ROLE"
                        roleName: "一般使用者"
                        createdAt: "2025/09/05 10:30:45"
                        updatedAt: "2025/09/05 10:30:45"
                update_success:
                  summary: 修改成功
                  value:
                    messageCode: "00000"
                    messageDesc: "交易成功"
                    messageContent:
                      user:
                        id: 1
                        username: "john.doe.updated"
                        email: "john.updated@example.com"
                        accountType: "ADMIN"
                        isActive: true
                        roleCode: "ADMIN"
                        roleName: "系統管理員"
                        createdAt: "2025/09/05 10:30:45"
                        updatedAt: "2025/09/05 14:22:10"
                delete_success:
                  summary: 刪除成功
                  value:
                    messageCode: "00000"
                    messageDesc: "交易成功"
                    messageContent: null
                username_exists:
                  summary: 使用者名稱已存在
                  value:
                    messageCode: "9999"
                    messageDesc: "使用者名稱已存在"
                    messageContent: null
                user_not_found:
                  summary: 使用者不存在
                  value:
                    messageCode: "9999"
                    messageDesc: "使用者不存在"
                    messageContent: null
                validation_error:
                  summary: 參數驗證失敗
                  value:
                    messageCode: "9999"
                    messageDesc: "action欄位不能為空"
                    messageContent: null

  /fes/api/users/list:
    get:
      tags:
        - 使用者管理
      summary: 使用者列表查詢
      description: |
        查詢系統使用者列表，支援分頁和多條件篩選，並顯示使用者關聯的角色代碼
        
        ## 功能特色
        - 支援使用者名稱和電子郵件模糊查詢
        - 支援帳號類型、啟用狀態、角色代碼精確查詢
        - 自動關聯使用者的角色資訊，提供完整的使用者權限檢視
        - 預設依建立時間降序排列，最新使用者在前
        - 密碼欄位不會在查詢結果中顯示，確保安全性
        
        ## 查詢條件
        - **模糊查詢**: username、email（支援部分比對）
        - **精確查詢**: accountType、isActive、roleCode（完全比對）
        - **條件組合**: 所有查詢條件可任意組合使用
        
        ## 重要變更 (v1.3.0)
        - **Null值處理**: 所有回應欄位都會包含在JSON中，null值會明確顯示為null
        - **角色關聯**: 透過LEFT JOIN獲取角色資訊，未分配角色的使用者roleCode和roleName為null
        - **快取優化**: 角色名稱會快取以提升查詢效能
      operationId: getSystemUserList
      parameters:
        - name: page
          in: query
          description: 頁碼，從1開始
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: pageSize
          in: query
          description: 每頁筆數
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
            example: 10
        - name: username
          in: query
          description: 使用者名稱模糊查詢
          required: false
          schema:
            type: string
            maxLength: 100
            example: "john"
        - name: email
          in: query
          description: 電子郵件模糊查詢
          required: false
          schema:
            type: string
            maxLength: 255
            example: "@example.com"
        - name: accountType
          in: query
          description: 帳號類型精確查詢
          required: false
          schema:
            type: string
            enum: ["ADMIN", "USER", "GUEST"]
            example: "USER"
        - name: isActive
          in: query
          description: 帳號啟用狀態篩選
          required: false
          schema:
            type: boolean
            example: true
        - name: roleCode
          in: query
          description: 角色代碼精確查詢
          required: false
          schema:
            type: string
            maxLength: 50
            example: "ADMIN"
      responses:
        '200':
          description: 查詢結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                success:
                  summary: 查詢成功
                  value:
                    messageCode: "00000"
                    messageDesc: "查詢成功"
                    messageContent:
                      query:
                        username: "admin"
                        email: null
                        accountType: "ADMIN"
                        isActive: true
                        roleCode: "SUPER_ADMIN"
                      pagination:
                        currentPage: 1
                        itemsPerPage: 10
                        totalItems: 25
                        totalPages: 3
                        hasNextPage: true
                        hasPrevPage: false
                      users:
                        - id: 1
                          username: "admin.user"
                          email: "admin@linebank.com"
                          accountType: "ADMIN"
                          isActive: true
                          roleCode: "SUPER_ADMIN"
                          roleName: "超級管理員"
                          createdAt: "2025/09/01 10:30:45"
                          updatedAt: "2025/09/03 14:22:10"
                        - id: 2
                          username: "john.doe"
                          email: "john.doe@linebank.com"
                          accountType: "USER"
                          isActive: true
                          roleCode: "USER"
                          roleName: "一般使用者"
                          createdAt: "2025/09/02 09:15:30"
                          updatedAt: "2025/09/02 09:15:30"
                        - id: 3
                          username: "guest.account"
                          email: "guest@linebank.com"
                          accountType: "GUEST"
                          isActive: false
                          roleCode: null
                          roleName: null
                          createdAt: "2025/09/03 16:45:20"
                          updatedAt: "2025/09/04 11:30:15"
                empty_result:
                  summary: 空結果
                  value:
                    messageCode: "00000"
                    messageDesc: "查詢成功"
                    messageContent:
                      query:
                        username: null
                        email: null
                        accountType: null
                        isActive: null
                        roleCode: null
                      pagination:
                        currentPage: 1
                        itemsPerPage: 10
                        totalItems: 0
                        totalPages: 0
                        hasNextPage: false
                        hasPrevPage: false
                      users: []
                validation_error:
                  summary: 參數驗證失敗
                  value:
                    messageCode: "9998"
                    messageDesc: "參數驗證失敗"
                    messageContent:
                      errors:
                        - field: "page"
                          message: "頁碼必須大於0"
                        - field: "accountType"
                          message: "帳號類型必須為ADMIN、USER或GUEST其中之一"

  /fes/api/users/{id}:
    get:
      tags:
        - 使用者管理
      summary: 依ID查詢使用者
      description: |
        查詢特定ID的使用者詳細資訊
        
        **重要變更 (v1.3.0)**: 所有回應欄位都會包含在結果中，null 值會明確顯示為 `null`，提升 API 回應的一致性和可預測性。
      operationId: getSystemUserById
      parameters:
        - name: id
          in: path
          description: 使用者系統唯一識別碼
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            example: 1
      responses:
        '200':
          description: 查詢結果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommResponse'
              examples:
                success:
                  summary: 查詢成功
                  value:
                    messageCode: "00000"
                    messageDesc: "查詢成功"
                    messageContent:
                      user:
                        id: 1
                        username: "admin.user"
                        email: "admin@linebank.com"
                        accountType: "ADMIN"
                        isActive: true
                        roleCode: "SUPER_ADMIN"
                        roleName: "超級管理員"
                        createdAt: "2025/09/01 10:30:45"
                        updatedAt: "2025/09/03 14:22:10"
                not_found:
                  summary: 使用者不存在
                  value:
                    messageCode: "9001"
                    messageDesc: "使用者不存在"
                    messageContent:
                      userId: 1

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT Token 認證，格式：`Bearer {token}`

  schemas:
    CommResponse:
      type: object
      description: 統一回應格式
      properties:
        messageCode:
          type: string
          description: 回應代碼
          example: "00000"
        messageDesc:
          type: string
          description: 回應描述
          example: "交易成功"
        messageContent:
          type: object
          description: 回應內容（可為 null）
          nullable: true
          additionalProperties: true
      required:
        - messageCode
        - messageDesc

    ValidationError:
      type: object
      description: 參數驗證錯誤詳情
      properties:
        field:
          type: string
          description: 錯誤欄位名稱
          example: "account"
        message:
          type: string
          description: 錯誤訊息
          example: "帳號不能為空"
      required:
        - field
        - message

    # 使用者管理相關 Schema
    UserLoginRequest:
      type: object
      description: 使用者登入請求
      properties:
        username:
          type: string
          description: 使用者名稱
          minLength: 1
          maxLength: 50
          example: "BK00361"
        password:
          type: string
          description: 使用者密碼
          minLength: 1
          maxLength: 100
          example: "a222222"
      required:
        - username
        - password

    UserCreateRequest:
      type: object
      description: 使用者建立請求
      properties:
        username:
          type: string
          description: 使用者名稱，系統內必須唯一
          minLength: 1
          maxLength: 50
          example: "BK00361"
        password:
          type: string
          description: 使用者密碼，將使用SHA-256加密存儲
          minLength: 1
          maxLength: 100
          example: "a222222"
        email:
          type: string
          description: 使用者電子郵件地址
          format: email
          maxLength: 100
          nullable: true
          example: "angus.kao@linebank.com.tw"
        accountType:
          type: string
          description: 帳號類型，用於區分使用者權限級別
          minLength: 1
          maxLength: 20
          example: "user"
        roleCode:
          type: string
          description: 部門代號，用於角色權限分配
          maxLength: 20
          nullable: true
          example: "BS011"
      required:
        - username
        - password
        - accountType

    UserLoginResponse:
      type: object
      description: 使用者登入成功回應內容
      properties:
        username:
          type: string
          description: 使用者名稱
          example: "BK00361"
        token:
          type: string
          description: JWT Token，後續API請求需要此值
          example: "eyJhbGciOiJIUzUxMiJ9.eyJhY2NvdW50VHlwZSI6ImFkbWluIi..."
        role:
          type: string
          description: 使用者角色代碼
          example: "BS011"
        menus:
          type: array
          description: 使用者功能選單列表，最多3層結構
          items:
            $ref: '#/components/schemas/MenuItemResponse'
      required:
        - username
        - token
        - role
        - menus

    MenuItemResponse:
      type: object
      description: 功能選單項目
      properties:
        id:
          type: integer
          description: 功能序號
          example: 100
        code:
          type: string
          description: 功能代碼
          example: "SYS_FUNC_MGMT"
        name:
          type: string
          description: 功能名稱
          example: "系統功能管理"
        url:
          type: string
          description: 功能URL
          nullable: true
          example: null
        path:
          type: string
          description: 功能路由路徑
          nullable: true
          example: null
        children:
          type: array
          description: 子功能選單
          items:
            $ref: '#/components/schemas/MenuItemResponse'
          nullable: true
      required:
        - id
        - code
        - name
        - children

    # 財金情境相關 Schema
    FiscSituationRequest:
      type: object
      description: 財金情境建立請求
      properties:
        account:
          type: string
          description: 測試帳號，必須唯一
          maxLength: 16
          example: "123456789012"
        situationDesc:
          type: string
          description: 情境描述說明
          maxLength: 100
          example: "測試通匯成功情境"
        memo:
          type: string
          description: 補充說明備註
          maxLength: 500
          example: "用於測試流程"
          nullable: true
        isRmt:
          type: boolean
          description: 通匯交易是否啟用
          nullable: true
          example: true
        rmtResultCode:
          type: string
          description: 通匯交易回應代碼
          maxLength: 5
          nullable: true
          example: "00000"
        isAtm:
          type: boolean
          description: 轉帳交易是否啟用
          nullable: true
          example: false
        atmResultCode:
          type: string
          description: 轉帳交易回應代碼
          maxLength: 5
          nullable: true
          example: "00000"
        atmVerify:
          type: boolean
          description: 核驗交易是否啟用
          nullable: true
          example: true
        atmVerifyRCode:
          type: string
          description: 核驗交易回應代碼
          maxLength: 5
          nullable: true
          example: "00000"
        atmVerifyRDetail:
          type: string
          description: 核驗結果詳情(91~96)
          maxLength: 6
          nullable: true
          example: "000001"
        isFxml:
          type: boolean
          description: FXML交易是否啟用
          nullable: true
          example: false
        fxmlResultCode:
          type: string
          description: FXML交易回應代碼
          maxLength: 5
          nullable: true
          example: "310"
      required:
        - account
        - situationDesc

    FiscSituationMaintenanceRequest:
      type: object
      description: 財金情境維護請求
      properties:
        action:
          type: string
          description: 操作類型
          enum: ["A", "U", "D"]
          example: "A"
        id:
          type: integer
          format: int64
          description: 財金情境ID（修改/刪除時必填）
          nullable: true
          example: 1
        account:
          type: string
          description: 測試帳號
          maxLength: 16
          nullable: true
          example: "123456789012"
        situationDesc:
          type: string
          description: 情境描述說明
          maxLength: 100
          nullable: true
          example: "測試通匯成功情境"
        memo:
          type: string
          description: 補充說明備註
          nullable: true
          example: "用於測試流程"
        isRmt:
          type: boolean
          description: 通匯交易是否啟用
          nullable: true
        rmtResultCode:
          type: string
          description: 通匯交易回應代碼
          maxLength: 5
          nullable: true
        isAtm:
          type: boolean
          description: 轉帳交易是否啟用
          nullable: true
        atmResultCode:
          type: string
          description: 轉帳交易回應代碼
          maxLength: 5
          nullable: true
        atmVerify:
          type: boolean
          description: 核驗交易是否啟用
          nullable: true
        atmVerifyRCode:
          type: string
          description: 核驗交易回應代碼
          maxLength: 5
          nullable: true
        atmVerifyRDetail:
          type: string
          description: 核驗結果詳情
          maxLength: 6
          nullable: true
        isFxml:
          type: boolean
          description: FXML交易是否啟用
          nullable: true
        fxmlResultCode:
          type: string
          description: FXML交易回應代碼
          maxLength: 5
          nullable: true
      required:
        - action

    FiscSituationResponse:
      type: object
      description: 財金情境回應
      properties:
        id:
          type: integer
          format: int64
          description: 系統唯一識別碼
          example: 1
        account:
          type: string
          description: 財金測試帳號
          example: "123456789012"
        situationDesc:
          type: string
          description: 情境描述
          example: "測試通匯交易成功情境"
        memo:
          type: string
          description: 補充說明
          nullable: true
          example: "用於測試流程"
        isRmt:
          type: boolean
          description: 通匯交易啟用狀態
          nullable: true
          example: true
        rmtResultCode:
          type: string
          description: 通匯交易結果代碼
          nullable: true
          example: "00000"
        isAtm:
          type: boolean
          description: 轉帳交易啟用狀態
          nullable: true
          example: false
        atmResultCode:
          type: string
          description: 轉帳交易結果代碼
          nullable: true
        atmVerify:
          type: boolean
          description: 核驗交易啟用狀態
          nullable: true
          example: true
        atmVerifyRCode:
          type: string
          description: 核驗交易結果代碼
          nullable: true
          example: "00000"
        atmVerifyRDetail:
          type: string
          description: 核驗交易結果詳情
          nullable: true
          example: "000001"
        isFxml:
          type: boolean
          description: FXML交易啟用狀態
          nullable: true
          example: false
        fxmlResultCode:
          type: string
          description: FXML交易結果代碼
          nullable: true
        creator:
          type: string
          description: 建立者帳號
          example: "john.doe"
        createdAt:
          type: string
          description: 建立時間
          format: date-time
          example: "2025/01/09 10:30:45"
        updater:
          type: string
          description: 最後更新者帳號
          example: "john.doe"
        updatedAt:
          type: string
          description: 最後更新時間
          format: date-time
          example: "2025/01/09 10:30:45"
      required:
        - id
        - account
        - situationDesc

    # 聯徵情境相關 Schema
    JcicSituationRequest:
      type: object
      description: 聯徵情境建立請求
      properties:
        txid:
          type: string
          description: 聯徵查詢交易代碼
          minLength: 1
          maxLength: 4
          example: "QJ01"
        inqueryKey1:
          type: string
          description: 主要查詢條件（通常為身分證字號）
          maxLength: 60
          example: "A101010107"
        inqueryKey2:
          type: string
          description: 次要查詢條件（通常為生日YYYYMMDD）
          maxLength: 15
          nullable: true
          example: "19801010"
        returnCode:
          type: string
          description: 聯徵查詢結果代碼
          maxLength: 5
          default: "D0000"
          example: "D0000"
        forceToJcic:
          type: string
          description: 強制發查旗標
          enum: ["Y", "N"]
          example: "Y"
        jcicDataDate:
          type: string
          description: 發查資料日期（YYYYMMDD格式）
          maxLength: 8
          nullable: true
          example: "20250101"
        jcicData:
          type: string
          description: |
            聯徵資料，建立時必填
            
            **重要變更 (v1.3.0)**: 接受 Base64 編碼的資料輸入，系統內部會自動轉換為 UTF-8 純文字儲存和回應
          maxLength: 10000
          format: base64
          example: "dGVzdERhdGE="
        situationDesc:
          type: string
          description: 情境描述
          minLength: 1
          maxLength: 200
          example: "聯徵查詢_A101010107_QJ01_強制發查"
        memo:
          type: string
          description: 補充說明
          maxLength: 500
          nullable: true
          example: "測試情境備註"
      required:
        - txid
        - inqueryKey1
        - returnCode
        - forceToJcic
        - jcicData
        - situationDesc

    JcicSituationMaintenanceRequest:
      type: object
      description: 聯徵情境維護請求
      properties:
        action:
          type: string
          description: 操作類型
          enum: ["A", "U", "D"]
          example: "A"
        id:
          type: integer
          format: int64
          description: 聯徵情境ID（修改/刪除時必填）
          nullable: true
          example: 1
        txid:
          type: string
          description: 聯徵查詢交易代碼
          maxLength: 4
          nullable: true
          example: "QJ01"
        inqueryKey1:
          type: string
          description: 主要查詢條件
          maxLength: 60
          nullable: true
          example: "A123456789"
        inqueryKey2:
          type: string
          description: 次要查詢條件
          maxLength: 15
          nullable: true
          example: "19801010"
        returnCode:
          type: string
          description: 聯徵查詢結果代碼
          maxLength: 5
          nullable: true
          example: "D0000"
        forceToJcic:
          type: string
          description: 強制發查旗標
          enum: ["Y", "N"]
          nullable: true
          example: "Y"
        jcicDataDate:
          type: string
          description: 發查資料日期（YYYYMMDD格式）
          maxLength: 8
          nullable: true
          example: "20250101"
        jcicData:
          type: string
          description: |
            聯徵回傳資料
            
            **重要變更 (v1.3.0)**: 接受 Base64 編碼的資料輸入，系統內部會自動轉換為 UTF-8 純文字儲存和回應
          format: base64
          nullable: true
          example: "dGVzdERhdGE="
        situationDesc:
          type: string
          description: 情境描述
          maxLength: 100
          nullable: true
          example: "新增個人信用報告即時查詢測試"
        memo:
          type: string
          description: 補充說明
          nullable: true
          example: "用於測試正常的聯徵查詢流程"
      required:
        - action

    JcicSituationResponse:
      type: object
      description: 聯徵情境回應
      properties:
        id:
          type: integer
          format: int64
          description: 系統唯一識別碼
          example: 1
        txid:
          type: string
          description: 聯徵查詢交易代碼
          example: "QJ01"
        inqueryKey1:
          type: string
          description: 主要查詢條件
          example: "A101010107"
        inqueryKey2:
          type: string
          description: 次要查詢條件
          nullable: true
          example: "19801010"
        returnCode:
          type: string
          description: 聯徵查詢結果代碼
          example: "D0000"
        forceToJcic:
          type: string
          description: 強制發查旗標
          enum: ["Y", "N"]
          example: "Y"
        jcicDataDate:
          type: string
          description: 發查資料日期
          nullable: true
          example: "20250101"
        jcicData:
          type: string
          description: |
            聯徵回傳資料（列表中可能顯示為"******"摘要）
            
            **重要變更 (v1.3.0)**: 回應格式改為 UTF-8 純文字，不再使用 Base64 編碼。但輸入時仍接受 Base64 格式以保持相容性
          nullable: true
          example: "******"
        situationDesc:
          type: string
          description: 情境描述
          example: "聯徵查詢_A101010107_QJ01_強制發查_成功"
        memo:
          type: string
          description: 補充說明
          nullable: true
          example: "測試情境備註"
        creator:
          type: string
          description: 建立者帳號
          example: "BK00361"
        createdAt:
          type: string
          description: 建立時間
          format: date-time
          example: "2025/07/05 05:00:00"
        updater:
          type: string
          description: 最後更新者帳號
          example: "BK00361"
        updatedAt:
          type: string
          description: 最後更新時間
          format: date-time
          example: "2025/07/05 05:00:00"
      required:
        - id
        - txid
        - inqueryKey1
        - returnCode
        - forceToJcic
        - situationDesc

    # 分頁相關 Schema
    PaginationInfo:
      type: object
      description: 分頁資訊
      properties:
        currentPage:
          type: integer
          description: 目前頁碼
          example: 1
        itemsPerPage:
          type: integer
          description: 每頁筆數
          example: 10
        totalItems:
          type: integer
          description: 總筆數
          example: 25
        totalPages:
          type: integer
          description: 總頁數
          example: 3
        hasNextPage:
          type: boolean
          description: 是否有下一頁
          example: true
        hasPrevPage:
          type: boolean
          description: 是否有上一頁
          example: false
      required:
        - currentPage
        - itemsPerPage
        - totalItems
        - totalPages
        - hasNextPage
        - hasPrevPage

    # Token 驗證相關 Schema
    TokenVerifyRequest:
      type: object
      description: Token 驗證請求
      properties:
        token:
          type: string
          description: 要驗證的 JWT Token
          example: "eyJhbGciOiJIUzUxMiJ9.eyJhY2NvdW50VHlwZSI6ImFkbWluIi..."
      required:
        - token

    # 交易模擬器相關 Schema
    SimulatorTransactionRequest:
      type: object
      description: 交易模擬器請求
      properties:
        header:
          $ref: '#/components/schemas/TransactionHeader'
        message:
          $ref: '#/components/schemas/TransactionMessage'
        data:
          $ref: '#/components/schemas/TransactionData'
      required:
        - header
        - data

    TransactionHeader:
      type: object
      description: 交易標頭
      properties:
        guid:
          type: string
          description: 全域唯一識別碼
          example: "20250821001234567890"
        tnsnSysCd:
          type: string
          description: 交易系統代碼
          enum: ["CBK", "CCB"]
          example: "CBK"
        tgmTpCd:
          type: string
          description: 電文類型代碼 (S=同步, A=非同步)
          enum: ["S", "A"]
          example: "S"
        extrSmlnTstYn:
          type: string
          description: 模擬測試旗標 (Y=模擬, N=真實)
          enum: ["Y", "N"]
          example: "Y"
        extrBizDsCd:
          type: string
          description: 業務類別代碼
          enum: ["111", "112", "113", "121"]
          example: "111"
      required:
        - guid
        - tnsnSysCd
        - tgmTpCd
        - extrSmlnTstYn
        - extrBizDsCd

    TransactionMessage:
      type: object
      description: 交易訊息 (可選)
      properties:
        messageType:
          type: string
          description: 訊息類型
          example: "REQUEST"
        messageContent:
          type: string
          description: 訊息內容
          example: "Transaction request message"

    TransactionData:
      type: object
      description: 交易資料
      properties:
        extHeader:
          $ref: '#/components/schemas/ExtTransactionHeader'
        extBody:
          $ref: '#/components/schemas/ExtTransactionBody'
      required:
        - extHeader
        - extBody

    ExtTransactionHeader:
      type: object
      description: 擴展交易標頭
      properties:
        transactionCode:
          type: string
          description: 交易代碼
          example: "ATM001"
        version:
          type: string
          description: 版本號
          example: "1.0"
      required:
        - transactionCode

    ExtTransactionBody:
      type: object
      description: 擴展交易內容
      properties:
        account:
          type: string
          description: 帳號 (FISC 交易使用)
          example: "123456789012"
        inqueryKey1:
          type: string
          description: 查詢條件1 (JCIC 交易使用)
          example: "A123456789"
        inqueryKey2:
          type: string
          description: 查詢條件2 (JCIC 交易使用)
          example: "19801010"
        amount:
          type: string
          description: 交易金額
          example: "1000"
        currency:
          type: string
          description: 幣別
          example: "TWD"
      additionalProperties: true

    SimulatorTransactionResponse:
      type: object
      description: 交易模擬器回應
      properties:
        header:
          $ref: '#/components/schemas/ResponseTransactionHeader'
        message:
          $ref: '#/components/schemas/TransactionMessage'
        data:
          $ref: '#/components/schemas/ResponseTransactionData'
      required:
        - header

    ResponseTransactionHeader:
      type: object
      description: 回應交易標頭
      properties:
        guid:
          type: string
          description: 全域唯一識別碼
          example: "20250821001234567890"
        resultCode:
          type: string
          description: 結果代碼
          example: "00000"
        resultDesc:
          type: string
          description: 結果描述
          example: "交易成功"
        processingTime:
          type: integer
          description: 處理時間 (毫秒)
          example: 150
      required:
        - guid
        - resultCode
        - resultDesc

    ResponseTransactionData:
      type: object
      description: 回應交易資料
      properties:
        account:
          type: string
          description: 帳號
          nullable: true
          example: "123456789012"
        resultCode:
          type: string
          description: 業務結果代碼
          example: "00000"
        resultDesc:
          type: string
          description: 業務結果描述
          nullable: true
          example: "交易成功"
        jcicData:
          type: string
          description: JCIC 資料 (UTF-8 純文字格式，不再使用 Base64)
          nullable: true
          example: "聯徵查詢結果資料..."
        balance:
          type: string
          description: 帳戶餘額
          nullable: true
          example: "50000"
      additionalProperties: true

    # 檔案上傳相關 Schema
    FileUploadRequest:
      type: object
      description: 檔案上傳請求
      properties:
        file:
          type: string
          format: binary
          description: 要上傳的 Excel 檔案 (.xlsx 格式)
        action:
          type: string
          description: 操作類型
          enum: ["CREATE", "UPDATE"]
          example: "CREATE"
      required:
        - file
        - action

    FileUploadResponse:
      type: object
      description: 檔案上傳處理結果
      properties:
        uploadId:
          type: string
          description: 本次上傳的唯一識別碼
          example: "upload-20250901-001"
        fileName:
          type: string
          description: 上傳的檔案名稱
          example: "財金情境資料.xlsx"
        action:
          type: string
          description: 操作類型
          enum: ["CREATE", "UPDATE"]
          example: "CREATE"
        totalRecords:
          type: integer
          description: 檔案中的總記錄數
          example: 100
        successRecords:
          type: integer
          description: 成功處理的記錄數
          example: 95
        failedRecords:
          type: integer
          description: 失敗的記錄數
          example: 5
        successRate:
          type: number
          format: double
          description: 成功率百分比 (保留兩位小數)
          example: 95.00
        processingTime:
          type: string
          description: 處理耗時 (格式：HH:MM:SS)
          example: "00:00:45"
        processedAt:
          type: string
          format: date-time
          description: 處理時間 (ISO 8601 格式)
          example: "2025-09-01T10:30:00Z"
        creator:
          type: string
          description: 操作使用者
          example: "john.doe"
        errors:
          type: array
          description: 錯誤清單
          items:
            $ref: '#/components/schemas/FileUploadError'
      required:
        - uploadId
        - fileName
        - action
        - totalRecords
        - successRecords
        - failedRecords
        - successRate
        - processingTime
        - processedAt
        - creator
        - errors

    FileUploadError:
      type: object
      description: 檔案上傳錯誤詳情
      properties:
        row:
          type: integer
          description: 資料列號 (null表示非特定列的錯誤)
          nullable: true
          example: 6
        column:
          type: string
          description: 欄位名稱 (null表示非特定欄位的錯誤)
          nullable: true
          example: "account"
        value:
          type: string
          description: 錯誤值 (null表示空值)
          nullable: true
          example: "12345"
        errorCode:
          type: string
          description: 錯誤代碼
          example: "9203"
        errorMessage:
          type: string
          description: 錯誤訊息
          example: "帳號格式不正確"
      required:
        - errorCode
        - errorMessage

    # 收送紀錄查詢相關 Schema
    TransactionLogQueryResponse:
      type: object
      description: 收送紀錄查詢回應
      properties:
        query:
          $ref: '#/components/schemas/TransactionLogQueryCondition'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        txlogs:
          type: array
          description: 交易記錄列表
          items:
            $ref: '#/components/schemas/TransactionLogInfo'
      required:
        - query
        - pagination
        - txlogs

    TransactionLogQueryCondition:
      type: object
      description: 收送紀錄查詢條件
      properties:
        startDatetime:
          type: string
          description: 查詢起始時間
          nullable: true
          example: "20250905000000"
        endDatetime:
          type: string
          description: 查詢結束時間
          nullable: true
          example: "20250906000000"
        systemType:
          type: string
          description: 系統類型
          enum: ["FA", "FI", "FX", "JC"]
          nullable: true
          example: "FA"
        txnId:
          type: string
          description: 交易代碼
          nullable: true
          example: "2521"
        guid:
          type: string
          description: GUID
          nullable: true
          example: "20250904171118213CBK02340D8DF1A7"
        italGuidOmsgID:
          type: string
          description: ITAI GUID Q MSG ID
          nullable: true
          example: "20250904171118213CBK02340D8DF1A8"
        uuid:
          type: string
          description: UUID
          nullable: true
          example: "20250904171118213CBK02340D8DF1A9"

    TransactionLogInfo:
      type: object
      description: 交易記錄資訊
      properties:
        logDatetime:
          type: string
          description: 記錄時間
          format: date-time
          example: "2025/09/05 05:00:00"
        systemType:
          type: string
          description: 系統類型
          enum: ["FA", "FI", "FX", "JC"]
          example: "FA"
        txnType:
          type: string
          description: 交易類型
          enum: ["req", "resp"]
          example: "req"
        txnId:
          type: string
          description: 交易代碼
          example: "2521"
        guid:
          type: string
          description: GUID交易唯一識別碼
          example: "20250904171118213CBK02340D8DF1A7"
        italGuidOmsgID:
          type: string
          description: ITAI GUID Q MSG ID
          example: "20250904171118213CBK02340D8DF1A8"
        uuid:
          type: string
          description: UUID
          example: "20250904171118213CBK02340D8DF1A9"
        txnData:
          type: string
          description: 交易完整資料 (JSON格式字串，已依據txmsglayout排序)
          example: '{"header":{"systemType":"FA","txnId":"2521","guid":"20250904171118213CBK02340D8DF1A7"},"body":{"account":"1234567890","amount":"10000"}}'
      required:
        - logDatetime
        - systemType
        - txnType
        - txnId
        - guid
        - italGuidOmsgID
        - uuid
        - txnData

    # 使用者維護相關 Schema
    UserMaintenanceRequest:
      type: object
      description: 使用者維護請求
      properties:
        action:
          type: string
          description: 操作類型
          enum: ["A", "U", "D"]
          example: "A"
        id:
          type: integer
          format: int64
          description: 使用者ID（修改/刪除時必填）
          nullable: true
          minimum: 1
          example: 1
        username:
          type: string
          description: 使用者帳號（新增/修改時必填）
          minLength: 3
          maxLength: 100
          pattern: '^[a-zA-Z0-9_.]+$'
          nullable: true
          example: "john.doe"
        email:
          type: string
          description: 電子郵件地址（新增/修改時必填）
          format: email
          minLength: 5
          maxLength: 255
          nullable: true
          example: "john.doe@example.com"
        password:
          type: string
          description: 使用者密碼（新增時必填）
          minLength: 8
          maxLength: 255
          nullable: true
          example: "SecurePass123!"
        accountType:
          type: string
          description: 帳號類型
          enum: ["ADMIN", "USER", "GUEST"]
          nullable: true
          example: "USER"
        isActive:
          type: boolean
          description: 帳號啟用狀態
          nullable: true
          example: true
        roleCode:
          type: string
          description: 角色代碼
          minLength: 1
          maxLength: 50
          nullable: true
          example: "USER_ROLE"
      required:
        - action
      additionalProperties: false

    SystemUserResponse:
      type: object
      description: 系統使用者回應
      properties:
        id:
          type: integer
          format: int64
          description: 使用者系統唯一識別碼
          example: 1
        username:
          type: string
          description: 使用者帳號
          example: "john.doe"
        email:
          type: string
          description: 電子郵件地址
          example: "john.doe@example.com"
        accountType:
          type: string
          description: 帳號類型
          enum: ["ADMIN", "USER", "GUEST"]
          example: "USER"
        isActive:
          type: boolean
          description: 帳號啟用狀態
          example: true
        roleCode:
          type: string
          description: 角色代碼
          nullable: true
          example: "USER_ROLE"
        roleName:
          type: string
          description: 角色名稱
          nullable: true
          example: "一般使用者"
        createdAt:
          type: string
          description: 建立時間
          format: date-time
          example: "2025/09/05 10:30:45"
        updatedAt:
          type: string
          description: 最後更新時間
          format: date-time
          example: "2025/09/05 10:30:45"
      required:
        - id
        - username
        - email
        - accountType
        - isActive
        - createdAt
        - updatedAt

    UserListQueryResponse:
      type: object
      description: 使用者列表查詢回應
      properties:
        query:
          $ref: '#/components/schemas/UserListQueryCondition'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        users:
          type: array
          description: 使用者列表
          items:
            $ref: '#/components/schemas/SystemUserResponse'
      required:
        - query
        - pagination
        - users

    UserListQueryCondition:
      type: object
      description: 使用者列表查詢條件
      properties:
        username:
          type: string
          description: 使用者名稱查詢條件
          nullable: true
          example: "john"
        email:
          type: string
          description: 電子郵件查詢條件
          nullable: true
          example: "@example.com"
        accountType:
          type: string
          description: 帳號類型查詢條件
          enum: ["ADMIN", "USER", "GUEST"]
          nullable: true
          example: "USER"
        isActive:
          type: boolean
          description: 啟用狀態查詢條件
          nullable: true
          example: true
        roleCode:
          type: string
          description: 角色代碼查詢條件
          nullable: true
          example: "USER_ROLE"